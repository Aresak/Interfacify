using Aresak.Interfacify.Generator.Data;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using System.Text;

namespace Aresak.Interfacify.Generator.Templates;

internal class FileTemplate(ClassMetadata metadata)
{
    protected ClassMetadata Metadata => metadata;

    public virtual string GenerateFile()
    {
        string properties = GenerateProperties();
        string usings = AddUsingStatements();
        string attributes = AddClassAttributes();
        string additionalCode = AddAdditionalClassCode();

        string code = $@"
            //----------------------
            // <auto-generated>
            //     Interfacify
            // </auto-generated>
            //----------------------

            using System.CodeDom.Compiler;
            {usings}

            namespace {Metadata.Namespace}
            {{
                {attributes}
                [GeneratedCode(""Interfacify"", ""1.0.0"")]
                {Metadata.AccessibilityToString()} partial class {Metadata.Name}
                {{
                    {additionalCode}
                    {properties}
                }}
            }}
            ";

        code = ArrangeUsingRoslyn(code);

        return code;
    }

    protected virtual string GenerateProperty(PropertyMetadata property)
    {
        PropertyTemplate template = new(property);
        return template.Generate();
    }

    protected virtual string AddUsingStatements()
    {
        return string.Empty;
    }

    protected virtual string AddAdditionalClassCode()
    {
        return string.Empty;
    }

    protected virtual string AddClassAttributes()
    {
        return string.Empty;
    }

    protected string GenerateProperties()
    {
        StringBuilder stringBuilder = new();

        foreach (PropertyMetadata property in Metadata.Properties)
        {
            string propertySource = GenerateProperty(property);
            stringBuilder.AppendLine(propertySource);
        }

        return stringBuilder.ToString();
    }

    protected static string ArrangeUsingRoslyn(string csCode)
    {
        SyntaxTree tree = CSharpSyntaxTree.ParseText(csCode);
        SyntaxNode root = tree.GetRoot().NormalizeWhitespace();
        string ret = root.ToFullString();

        return ret;
    }
}
